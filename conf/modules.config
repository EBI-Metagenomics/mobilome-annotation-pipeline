/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {

    withName: AMRFINDER_PLUS {
        memory     = { 72.GB * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/functional_annotation" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMRFINDER_REPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/functional_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ARAGORN {
        ext.args = [
            "-w",
            "-i",
            "-t",
            "-gc1",
        ].join(' ')
    }

    withName: BLASTP_PROKKA {
        ext.args   = [
            "-outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen stitle\"",
            "-evalue", "1E-9",
            "-qcov_hsp_perc", "80",
            "-num_descriptions", "1",
            "-num_alignments", "1",
            "-seg", "no"
        ].join(' ')
        ext.prefix = { "${meta.id}_blastp_uniprot" }
    }

    withName: FASTA_WRITER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GENOMAD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/genomad" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GFF_MAPPING {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GFF_REDUCE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: INTEGRATOR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: INTEGRONFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/integronfinder" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ISESCAN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/isescan" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: MACSYFINDER {
        ext.args = [
            "--coverage-profile",
            "0.3",
            "--replicon-topology",
            "linear",
            "--db-type",
            "ordered_replicon",
            "--hmmer",
            "hmmsearch",
            "--models",
            "ICEscan",
            "all",
        ].join(' ')
    }

    withName: OUTLIER_FINDER {
        memory     = { 24.GB * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/compositional_outliers" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: PRODIGAL {
        ext.args = [
            "-p",
            "meta",
        ].join(' ')
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/functional_annotation" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: REFINE_BOUNDARIES {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/icefinder2lite" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: RENAME {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/preprocessing" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: VIRIFY_QC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/prediction/virify_filter" },
            mode: params.publish_dir_mode,
            enabled: params.publish_all,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: VMATCH {
        ext.args  = [
            "-dna",
            "-pl",
            "-lcp",
            "-suf",
            "-tis",
            "-ois",
            "-bwt",
            "-bck",
            "-sti1",
        ].join(' ')
        ext.args2 = [
            "-l",
            "15",
            "-showdesc",
            "0",
        ].join(' ')
    }

    // Pipeline info modules
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // nf-core BLAST module configurations

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    // TODO: the following section hasn't been fully implemented //
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

    // withName: MOBILEOG_BLAST {
    //     label      = 'process_low'
    //     ext.args   = '--evalue 1e-20 --query-cover 90 --id 90 --max-hsps 15'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/mobileog/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }
    // withName: RESFINDER_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/resfinder/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // withName: VFDB_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/vfdb/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // withName: ISFINDER_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/isfinder/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // withName: METAL_RESISTANCE_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/metal/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // withName: DEGRADATION_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/degradation/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // withName: SYMBIOSIS_BLAST {
    //     ext.args   = '-evalue 0.0001 -max_hsps 1 -num_descriptions 1 -num_alignments 1 -outfmt "6 std slen stitle"'
    //     publishDir = [
    //         path: { "${params.outdir}/${meta.id}/functional_annotation/symbiosis/" },
    //         mode: params.publish_dir_mode,
    //         enabled: params.publish_all,
    //     ]
    // }

    // // Filter configurations for BLAST results
    // withName: FILTER_BLAST_RESFINDER {
    //     ext.args   = '--type nucleotide'
    //     ext.suffix = 'arg'
    // }

    // withName: FILTER_BLAST_VFDB {
    //     ext.args   = '--type protein'
    //     ext.suffix = 'vf'
    // }

    // withName: FILTER_BLAST_ISFINDER {
    //     ext.args   = '--type protein'
    //     ext.suffix = 'is'
    // }

    // withName: FILTER_BLAST_METAL {
    //     ext.args   = '--type protein'
    //     ext.suffix = 'metal'
    // }

    // withName: FILTER_BLAST_DEGRADATION {
    //     ext.args   = '--type protein'
    //     ext.suffix = 'degradation'
    // }

    // withName: FILTER_BLAST_SYMBIOSIS {
    //     ext.args   = '--type nucleotide'
    //     ext.suffix = 'symbiosis'
    // }
}
